{"version":3,"sources":["components/Titles/Titles.js","components/WeatherForm/WeatherForm.js","components/Weather/Weather.js","containers/App.js","Actions/Actions.js","Constants/Constants.js","serviceWorker.js","Reducers/Reducers.js","index.js"],"names":["Titles","Fragment","className","WeatherForm","getWeatherApi","onSubmit","type","name","placeholder","autoComplete","Weather","temperature","humidity","city","country","description","error","API_KEY","process","App","e","preventDefault","target","elements","value","props","getWeather","this","Component","connect","state","dispatch","fetch","then","response","json","data","payload","catch","setWeather","Boolean","window","location","hostname","match","initialState","isPending","middlewares","thunkMiddleware","store","createStore","action","main","temp","sys","weather","applyMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.014f636f.chunk.js","sourcesContent":["import React from 'react';\nimport './Title.css';\n\nconst Titles =() =>{\n\n\treturn(\n\t\t<React.Fragment>\n\t\t<div>\n         <h1 className='title'>Find weather</h1>\n         <p className='subtitle'>Find out the weather of countries....</p>\n         </div>\n\t  </React.Fragment>\n       \n\t\t)\n}\n\nexport default Titles;","import React from \"react\";\nimport \"./WeatherForm.css\";\nconst WeatherForm = ({ getWeatherApi }) => {\n  return (\n    <React.Fragment>\n      <form onSubmit={getWeatherApi}>\n        <input\n          type=\"text\"\n          name=\"city\"\n          placeholder=\"Enter the city\"\n          className=\"formSearch-input\"\n          autoComplete=\"off\"\n        />\n        <input\n          type=\"text\"\n          name=\"country\"\n          placeholder=\"Enter the country\"\n          className=\"formSearch-input\"\n          autoComplete=\"off\"\n        />\n        <button type=\"submit\" className=\"formSearch-button\">\n          Get Weather\n        </button>\n      </form>\n    </React.Fragment>\n  );\n};\n\nexport default WeatherForm;\n","import React from 'react';\nimport './Weather.css';\n\n\nconst Weather = ({temperature,humidity,city,country,description,error}) =>{\n\treturn(\n        <React.Fragment>\n          <div className='info'>\n            {city && country &&\n              <p>Location: <span> {city},{country} </span></p>\n            }\n            {temperature &&\n              <p>Temperature: <span>{temperature} </span></p>\n            }\n            {humidity &&\n              <p>Humidity: <span> {humidity} </span></p>\n            }\n            {description &&\n              <p>Weather: <span>{description} </span></p>\n            }\n            {error && \n              <p> {error}</p>\n            }\n\n          </div>\n\n        </React.Fragment>\n\n\t\t)\n}\n\nexport default Weather;","import React, {Component} from 'react';\n\nimport './App.css';\nimport Titles from '../components/Titles/Titles';\nimport WeatherForm from '../components/WeatherForm/WeatherForm';\nimport Weather from '../components/Weather/Weather';\nimport { connect} from 'react-redux';\nimport {setWeather} from '../Actions/Actions';\n\n\nconst API_KEY= process.env.REACT_APP_API_KEY\n\nconst mapStateToProps=(state)=>{\n  return{ \n         temperature:state.temperature,\n          humidity:state.humidity,\n          city:state.city,\n          country:state.country,\n          description:state.description,\n          error:state.error\n  }\n}\n\nconst mapDispatchToProps= dispatch=>{\n  return{\n    getWeather:(API_KEY,city,country)=>dispatch(setWeather(API_KEY,city,country))\n  }\n}\n\nclass App extends Component{\n   \n     getWeatherApi=(e)=>{\n      e.preventDefault();\n          const city = e.target.elements.city.value;\n          const country= e.target.elements.country.value;\n          if(city && country){\n            this.props.getWeather(API_KEY,city,country)\n             }\n        }\n       \n   render(){\n    const {temperature,humidity,city,country,description,error}=this.props;\n     return (\n    <React.Fragment>\n    <div>\n      <header className=\"App-header\">\n        <h1>Weather App</h1>\n\n      </header>\n      <div className='main'>\n       <div className='flex-wrapper'>\n         \n           <div className='column title-left'>\n             <Titles />\n           </div>\n           <div className='column form-right'>\n\n             <WeatherForm \n             getWeatherApi={this.getWeatherApi}\n             />\n             <Weather \n             temperature={temperature}\n             humidity={humidity}\n             city={city}\n            country={country}\n            description={description}\n            error={error}\n             /> \n             \n              </div>\n         </div>\n      </div>\n    </div>\n    </React.Fragment>\n  );\n}\n   }\n  \n\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\n","\nimport {\n\tREQUEST_WEATHER_PENDING,\n\tREQUEST_WEATHER_SUCCESS,\n\tREQUEST_WEATHER_FAILED\n} from '../Constants/Constants';\n\n\nexport const setWeather=(API_KEY,city,country)=>dispatch=>{\n\t\tdispatch({type:REQUEST_WEATHER_PENDING})\n\t\tfetch(`https://cors-anywhere.herokuapp.com/https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`)\n\t\t.then(response=> response.json())\n\t\t.then(data=>dispatch({type:REQUEST_WEATHER_SUCCESS,payload:data}))\n\t\t.catch(error=>dispatch({type:REQUEST_WEATHER_FAILED,payload:error}))\n\t}\n","\nexport const REQUEST_WEATHER_PENDING = \"REQUEST_WEATHER_PENDING\";\nexport const REQUEST_WEATHER_SUCCESS = \"REQUEST_WEATHER_SUCCESS\";\nexport const REQUEST_WEATHER_FAILED = \"REQUEST_WEATHER_FAILED\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  REQUEST_WEATHER_PENDING,\n  REQUEST_WEATHER_SUCCESS,\n  REQUEST_WEATHER_FAILED\n} from \"../Constants/Constants\";\n\nconst initialState = {\n  temperature: \"\",\n  humidity: \"\",\n  city: \"\",\n  country: \"\",\n  description: \"\",\n  error: \"\",\n  isPending: false\n};\n\nexport const requestWeather = (state = initialState, action = {}) => {\n  switch (action.type) {\n    case REQUEST_WEATHER_PENDING:\n      return {\n        ...state,\n        isPending: true\n      };\n\n    case REQUEST_WEATHER_SUCCESS:\n      return {\n        ...state,\n        isPending: false,\n        temperature: action.payload.main.temp,\n        humidity: action.payload.main.humidity,\n        city: action.payload.name,\n        country: action.payload.sys.country,\n        description: action.payload.weather[0].description\n      };\n    case REQUEST_WEATHER_FAILED:\n      return {\n        ...state,\n        isPending: false,\n        error: \"Sorry! Please Enter a valid city and country\"\n      };\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport { requestWeather } from \"./Reducers/Reducers\";\nimport logger from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\n\nconst middlewares = [thunkMiddleware];\nif (process.env.NODE_ENV === \"development\") {\n  middlewares.push(logger);\n}\nconst store = createStore(requestWeather, applyMiddleware(...middlewares));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}